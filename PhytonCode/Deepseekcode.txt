from openai import OpenAI
import pandas as pd
import time

# Configure DeepSeek client
client = OpenAI(
    api_key="sk-Deepseek_key",  #
    base_url="https://api.deepseek.com"
)

PROMPTS = {
    "direct": (
        "You are a clinical language expert.",
        "Interpret the following Swedish medical abbreviation or short term: '{text}'. Return only its full English meaning as a single medical term. Do not explain or translate the sentence, just the term."
    ),
    "phrase": (
        "You are a clinical language expert.",
        "Interpret the following Swedish medical abbreviation or short term: '{text}'. Return only its full English meaning as a single medical term. Do not explain or translate the sentence, just the term."
    ),
    "error": (
        "You are a clinical language expert.",
        "Correct the possibly misspelled Swedish medical abbreviation or term in: '{text}'. Then provide its correct full English meaning."
    ),
}

# Process each file according to its type
def process_file(filepath, task_type, model="deepseek-chat"):
    print(f"Processing '{filepath}' as type '{task_type}'...")
    system_prompt, user_template = PROMPTS[task_type]

    df = pd.read_csv(filepath)
    texts = df['context'].fillna(df['term_swe'])

    results = []
    times = []

    for idx, row in df.iterrows():
        input_text = row["context"] if pd.notna(row["context"]) and row["context"].strip() else row["term_swe"]
        prompt = user_template.replace("{text}", input_text)

        try:
            start = time.time()
            response = client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                temperature=1.3,
                max_tokens=30,
                stream=False
            )
            end = time.time()
            output = response.choices[0].message.content.strip()
        except Exception as e:
            output = f"ERROR: {str(e)}"
            end = time.time()

        results.append(output)
        times.append(round(end - start, 2))
        time.sleep(1)  # prevent rate limit issues

    df['DeepSeek_Output'] = results
    df['ResponseTime_sec'] = times

    output_path = filepath.replace(".csv", "_deepseek_output.csv")
    df.to_csv(output_path, index=False)
    print(f" Saved to: {output_path}")

# Execute for all 3 types
process_file("direct.csv", task_type="direct")
process_file("phrases.csv", task_type="phrase")
process_file("errors.csv", task_type="error")